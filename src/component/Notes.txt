React Query
What?
A library for fetching data in a react application.

Why we need a library for data feteching?
1) Since React is a UI library, there is no specific pattern for data fetching.
2) Typically, we make use of useEffect hook for data fetching and useState hook
   to maintain component state like loading, error or resulting data.
3) If the data is needed throughout the app, we tend to use state management libraries.
4) Most of the state management libraries are good for working with client state.
    Ex.'theme' for the application / whether a modal is open.
5) State management libraries are not great for working with asynchronous or server state.
   This is because server state is very different to client state.

Client vs server state

Client state
Persisted in our app memory and accessing or updating it is synchronous.

Server state
Persisted remotely and requires asynchronous APIs for fetching or updating.

Server state has shared ownership i.e data can be updated by someone else without our
knowledge which can quickly lead to UI data that may not be in sync with the remote
data.

More challenging when we have to deal with caching, deduping multiple requests for the same data,
updating stale data in the backgorund. performance optimizations etc.

This challennged can be solved with react query library.

Features we will covered:-
Basic queries âœ”
Poll data
RQ dev tools
create reusable query hooks
query by ID
parallel queries
Dynamic queries
Dependent queries
Infinite and paginated queries

We also need to keep in mind that the server state is not just fetching,
it also needs updating.

For that :-
Update data using mutations
Invalidate queries when mutation is successful
OPtimistic update
Axios Interceptor with react query

Lecture - 3_Fetching Data with useQuery
 steps
 1) install the package
 2) we need to add react query to our application
      At the top of our component tree, we need to add reactQueryProvider and provide the
      client to the provider. 
      By doing so,we will have access to every hook and method that react query provides.


Lecture - 5_React query Devtools
One of the feature of react query is that it comes with dedicated devtools.
It helps is visualize all of the inner workings of react query and likely save 
us hours of debugging.

Lecture - 6_Query Cache
By Default, every query result is cached for five minutes and react query relies
on that cached for susbsequent requests.

How useQuery works w.r.t caching?
For the first time, useQuery is fired for superheros key,
isLoading is set to true and a network request is sent to fetch the data.
When the request is completed, it is cached using the query key and the 
fetchSuperheros() function (that we defined in the component)  as the unique
identifiers.

Now when we navigate to other page and revisit the rq superheros page,
react query will check if the data for this query exists in cache.
Since (in our example) it does, the cached data is immediately returned
without isLoading set to true.

That is the reason we don't see loading text for susbsequent requests.

However, react query knows that the server data might have updated and the
cache might not contain the latest data.
So a background refetch is triggered for the same query and if the fetch is 
successful, the new data is updated in the ui.

Since in our example, the data is same as the cached data, we don't see any change in the UI.


Q.) If isLoading is not changed, does useQuery provide another boolean
   flag to indicate the background refetching of the query. 

Ans : - Yes, and the flag is called isFetching.

This way react query out of the box leads to better user experience as there is a list being
displayed already and then the list updates in the background.

User doesn't have to see the loading indicator every single time.

How do we configure the cache time?
Since, react query set the default value of 5 minutes for the query cache.
But if we want / needs to change it, pass in a third argument to useQuery.
Third argument is an object where we can configure multiple properties of which
cachetime is one of them.

Summary
One of the uses of caching the query results is being able to reuse the results
for susbsequent queries. That will allow the user to view the previously fetched data 
without having to view the loading indicator every single time. Thus leading to a slightly
better user experience.


Lecture - 7_Stale Time 

Another use of query cache is to reduce the number of network requests for data
that doesn't necessarily change too often.

For e.g. suppose our list of superheros doesn't change more often and its okay
if user sees stale data for a while.
In such cases, we can use the cached query results without having to refetch in the background.

To acheieve that behavior we configure another property called stale time.


Default stale time is 0 sec.


Lecture - 8_Refetch Defaults
Recap : - React query have default cache duration of 5 minutes and default
stale time of zero seconds.

In this lecture, we will learn two more configuration related to refetching 
for which react query provides a default value.

1) refetchForMount -> by default it is set to true.
   If it is set to true then the query will refetch on mount if the data 
   is stale.

   If we set it to false, the query will not refetch on mount.

   we can also set it to a string 'always', which will refetch whether the data is stale or not.

2) refetchOnWindowFocus -> slightly more important than refetchOnMount.

In traditional way of fetching data,If data in server side changes then it wouldn't 
automatically update the data in client side until and unless we refresh the page(until componentDidMount not called)

But with react query, data in client side automatically updates.
Our UI will be in sync with the remote data.
This is possible because of the refetchOnWindowFocus configuration.

By default it is set to true.

So any time, tab losses focus and gains focus again, a background refetch is 
initiated. When the refetch completes, the UI is updated with the data retrieved.

This is perfectly valid default value which ensures the UI is upto date with the remote 
data when the users come back to application.

other values that we can set on refetchOnWindowFocus => false, 'always'(refetch irrespective of whether the query data is stale or not)
