React Query
What?
A library for fetching data in a react application.

Why we need a library for data feteching?
1) Since React is a UI library, there is no specific pattern for data fetching.
2) Typically, we make use of useEffect hook for data fetching and useState hook
   to maintain component state like loading, error or resulting data.
3) If the data is needed throughout the app, we tend to use state management libraries.
4) Most of the state management libraries are good for working with client state.
    Ex.'theme' for the application / whether a modal is open.
5) State management libraries are not great for working with asynchronous or server state.
   This is because server state is very different to client state.

Client vs server state

Client state
Persisted in our app memory and accessing or updating it is synchronous.

Server state
Persisted remotely and requires asynchronous APIs for fetching or updating.

Server state has shared ownership i.e data can be updated by someone else without our
knowledge which can quickly lead to UI data that may not be in sync with the remote
data.

More challenging when we have to deal with caching, deduping multiple requests for the same data,
updating stale data in the backgorund. performance optimizations etc.

This challennged can be solved with react query library.

Features we will covered:-
Basic queries ✔
Poll data
RQ dev tools
create reusable query hooks
query by ID
parallel queries
Dynamic queries
Dependent queries
Infinite and paginated queries

We also need to keep in mind that the server state is not just fetching,
it also needs updating.

For that :-
Update data using mutations
Invalidate queries when mutation is successful
OPtimistic update
Axios Interceptor with react query

Lecture - 3_Fetching Data with useQuery
 steps
 1) install the package
 2) we need to add react query to our application
      At the top of our component tree, we need to add reactQueryProvider and provide the
      client to the provider. 
      By doing so,we will have access to every hook and method that react query provides.


Lecture - 5_React query Devtools
One of the feature of react query is that it comes with dedicated devtools.
It helps is visualize all of the inner workings of react query and likely save 
us hours of debugging.

Lecture - 6_Query Cache
By Default, every query result is cached for five minutes and react query relies
on that cached for susbsequent requests.

How useQuery works w.r.t caching?
For the first time, useQuery is fired for superheros key,
isLoading is set to true and a network request is sent to fetch the data.
When the request is completed, it is cached using the query key and the 
fetchSuperheros() function (that we defined in the component)  as the unique
identifiers.

Now when we navigate to other page and revisit the rq superheros page,
react query will check if the data for this query exists in cache.
Since (in our example) it does, the cached data is immediately returned
without isLoading set to true.

That is the reason we don't see loading text for susbsequent requests.

However, react query knows that the server data might have updated and the
cache might not contain the latest data.
So a background refetch is triggered for the same query and if the fetch is 
successful, the new data is updated in the ui.

Since in our example, the data is same as the cached data, we don't see any change in the UI.


Q.) If isLoading is not changed, does useQuery provide another boolean
   flag to indicate the background refetching of the query. 

Ans : - Yes, and the flag is called isFetching.

This way react query out of the box leads to better user experience as there is a list being
displayed already and then the list updates in the background.

User doesn't have to see the loading indicator every single time.

How do we configure the cache time?
Since, react query set the default value of 5 minutes for the query cache.
But if we want / needs to change it, pass in a third argument to useQuery.
Third argument is an object where we can configure multiple properties of which
cachetime is one of them.

Summary
One of the uses of caching the query results is being able to reuse the results
for susbsequent queries. That will allow the user to view the previously fetched data 
without having to view the loading indicator every single time. Thus leading to a slightly
better user experience.


Lecture - 7_Stale Time 

Another use of query cache is to reduce the number of network requests for data
that doesn't necessarily change too often.

For e.g. suppose our list of superheros doesn't change more often and its okay
if user sees stale data for a while.
In such cases, we can use the cached query results without having to refetch in the background.

To acheieve that behavior we configure another property called stale time.


Default stale time is 0 sec.


Lecture - 8_Refetch Defaults
Recap : - React query have default cache duration of 5 minutes and default
stale time of zero seconds.

In this lecture, we will learn two more configuration related to refetching 
for which react query provides a default value.

1) refetchForMount -> by default it is set to true.
   If it is set to true then the query will refetch on mount if the data 
   is stale.

   If we set it to false, the query will not refetch on mount.

   we can also set it to a string 'always', which will refetch whether the data is stale or not.

2) refetchOnWindowFocus -> slightly more important than refetchOnMount.

In traditional way of fetching data,If data in server side changes then it wouldn't 
automatically update the data in client side until and unless we refresh the page(until componentDidMount not called)

But with react query, data in client side automatically updates.
Our UI will be in sync with the remote data.
This is possible because of the refetchOnWindowFocus configuration.

By default it is set to true.

So any time, tab losses focus and gains focus again, a background refetch is 
initiated. When the refetch completes, the UI is updated with the data retrieved.

This is perfectly valid default value which ensures the UI is upto date with the remote 
data when the users come back to application.

other values that we can set on refetchOnWindowFocus => false, 'always'(refetch irrespective of whether the query data is stale or not)

Lecture - 9_Polling
Refers to fetching data at regular interval.
E.g. If we have a component that shows the real-time price of different stocks, we
might want to fetch data every second to update the UI.
This ensures the UI will always be in sync with the remote data irrespective of
configuration like refetchOnMount and refetchOnWindowFocus which is dependent on user interaction.

To poll data in react query, we can make use another configuration called
refetchInterval.

By default, it is set to false.
However we can set it to a number in miliseconds which will result in a continuous
refetch of the query at that interval. 

E.g if we set it to 3000, the query will automatically refetch every two second.

The polling or automatic refetching is paused if the window loses focus.
If we do want backgorund refetching at regular intervals, we can specify
another configuration called refetchIntervalInBackground and set it to true.

This will continue to pull the data even if the browser is not on focussed.

Lecture - 10_useQuery on click

In prevoius lectures, we have learnt that request is fired as soon as the 
component mounts or if we focus the window.

However, depending on the requirement, we might have to fetch the data based
on a user event and not when the component mounts.

So, in this lecture we learn how to fetch data using useQuery but only onClick
of a button. 

For this, there are two steps that we need to implement :-
1) Inform useQuery not to fire the get request when the component mounts.
   We do that by passing in a configuration called enabled and setting it to false.
   {
      enabled:false
   }
   By doing this, we don't see data when component mount or if we focus the window. 
   React query will track the data in the devtool but its data will be empty

   So step 1 => Disable fetching on mount using the enabled flag.
2) We fetch the data on click of a button.
   useQuery provide/return a function called refetch to manually trigger the query.
   We have to pass this refetch() in onClick handler.

   Still the Query cache and stale time still play the same role.
   on first request, isLoading will be true and we will see Loading spinner.
   on susbsequent request, only isFetching flag will be true because of the 
   background refetching that takes place.

   If we have refresh button (🔄), then it is recommanded to enable isFetching flag
   to display the Loading indicator.


   Lecture-11 _ Success and Error callbacks
   we will learn callbacks with useQuery.

   When we are dealing with data fetching, sometimes we might want to perform 
   a side effect when the query completes.
   E.g. opening a model, navigating to different route or even displaying toast notification.

   To cater these scenarios, react query let us specify success and error callbacks as configurations or options 
   to the useQuery hook.

   Steps to followed :-
   1) we need to define two functions which will be called when the query succeeds or when it fails. 
   2) To attach this functions (onSuccess and onError functions) to our superheros query all we have to do is
      specify onSuccess and onError configurations.

   Notes :-
 ➡  React query automatically injects the data that has been fetched or the error that 
     was encountered into these callbacks.
 ➡ So we can specify data as parameter to onSuccess and error as parameter to onError.

Summary
Thus, react query allow us to do side effects based on the actual response for that 
individual query.

Lecture-12_Data Transformation
In most scenarios, we need to transform data into certain format that we are getting from server that 
the frontend component can consume.

To help with such scenarios, react query provides a select configuration option
which we can specify in the useQuery hook.

⏭ Select is a function which automatically receives the api data as an argument. 
(data in our case is basically the response)

Data tranformation also includes data filtering.

Lecture_13 - Custom Query Hook 

Summary
UseQuery hook is used to fetch data.
The first argument is a unique key, the second argument is a fetcher function and 
the third argument is an object where we can specify options or configurations to tweek its 
behaviour.
The hook also returns a number of values which we can use to render the components.

But for larger app, we want to reuse the data fetching logic.
E.g. - The same query might be required in a different component.

So we need a way to resuse the useQuery hook.
So this lecture, we will learn how to create a custom hook that wraps around the
useQuery hooks.

Thus, that would allow us to call the custom hook from multiple components
wihout having to duplicate the code.

Lecture_14 - Query by Id 
One scenarios that is pretty common with data fetching is quering by id.
E.g - we have a list of items and on click of an item, we want the details
of that individual items.

Querying by Id setup (in our case)
1) Create a new page that will eventually display the details about one single superhero.
2) Configure the route to that page and add a link from the super heros list page to the super hero 
   details page.
3) Fetch a superhero by id and display the details in the UI.


Lecture_15 - Parallel queries
Sometimes a single component needs to call multiple apis to fetch the neccessary data.
With react query it is as simple as calling use query twice.

Lecture_18 - Initial Query Data 
This feature improves the data viewing experience 
for a user thereby is simething we should consider 
for our application and i.e. providing initial 
query data.

When we apply throttle of slow 3G and 
navigate to RQ superHero page then we see the 
loading text and the list of heros.

Now when we click on one of the item in list to
navigate to superohero details page, we see the 
loading text again and then the hero details.

Here is a question we can ask ourselves..
We have already fetched the hero data in the list 
component itself. Can we not use that data in the 
details page??

The answer is yes, we can do that but we have to 
keep in mind that the listing page may not contain
all the data we display in the details page.

So another api to fetch all the details cannot be ruled out.

What we can do however is to use listing data as the 
initial data to the details query.
What that allows is for react query to not set a loading 
state to the details query.
Only a background refectch is initiated and once the details are 
retrieved they will overwrite any inital data we might have set.

Thus the entire loading state of the component in superhero
details page can be eliminated and the data that is already 
present in the query cache from the previous query will be 
used to render partial data to the user.


Steps 
1) we need access to the queryClient that we have set at the top level
   using the provider component.

   For that react query provides another hook.

2) Within the custom query hook, we call useQueryClient to get hold of 
   client instance.

   QueryClient instance has the access to the query cache which we can now 
   access to set the initial data.

3) We specify the third argument to the useQuery which is an object.
   The property is called initialData and this is a function. 


Lecture - 19
Pagination

Goal is to paginate list of eight colors displaying only two per page.

JSON Server supports pagination under the hood
localhost:4000/colors?_limit=2&_page=1

We need to use these query parameters to implement pagination in our 
component.

Lecture - 20
Infinite queries

In our example, we are going to work with load more button rather then
loading more when the user scrolls to the end of the screen. 


Lecture - 21
From this lecture, we focus on the data posting aspect i.e. sending data 
from our application to backend.

In this lecture, we will learn how to perform a basic post request.
